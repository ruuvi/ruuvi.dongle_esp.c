name: SonarCloud Analysis with Google Test and gcovr

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    env:
      BUILD_WRAPPER_OUT_DIR: bw-output # Directory where build-wrapper output will be placed

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ cmake gcovr
          sudo apt-get install -y locales
          sudo locale-gen de_DE.UTF-8
          sudo apt-get install -y gcc git wget make libncurses-dev flex bison gperf python3 python3-pip python3-setuptools python3-serial python3-click python3-cryptography python3-future python3-pyparsing python3-pyelftools cmake ninja-build ccache libffi-dev libssl-dev

      - name: Install ESP-IDF v4.2.2
        run: |
          mkdir ~/esp
          cd ~/esp
          git clone --recursive --branch v4.2.2 https://github.com/espressif/esp-idf.git
          cd esp-idf
          ./install.sh

      - name: Set up environment variables
        run: |
          echo "IDF_PATH=~/esp/esp-idf" >> $GITHUB_ENV
          echo "::add-path::~/esp/esp-idf/tools"

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Run build-wrapper
        run: |
          . ~/esp/esp-idf/export.sh
          printenv | grep IDF
          idf.py version          
          mkdir build
          cd build
          build-wrapper-linux-x86-64 --out-dir ../${{ env.BUILD_WRAPPER_OUT_DIR }} cmake -DCMAKE_BUILD_TYPE=Debug ..
          build-wrapper-linux-x86-64 --out-dir ../${{ env.BUILD_WRAPPER_OUT_DIR }} make
          cd ..

      - name: Run test with coverage
        run: |
          cd tests
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" ..
          make
          ctest
          cd ../..
          gcovr -r . --sonarqube -o coverage.xml

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths=coverage.xml
