# Google Test

name: Google Test

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ master ]

jobs:
  google-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Check Python version
        run: |
          python --version
          python3 --version
          python3.8 --version

      - name: Set Python 3.8 as default
        run: |
          echo "alias python=python3.8" >> ~/.bashrc
          source ~/.bashrc          

      - name: Install dependencies
        run: |
          sudo apt-get install -y cmake
          sudo apt-get install -y locales
          sudo locale-gen de_DE.UTF-8
          sudo apt-get install -y gcc git wget make libncurses-dev flex bison gperf python3 python3-pip python3-setuptools python3-serial python3-click python3-cryptography python3-future python3-pyparsing python3-pyelftools cmake ninja-build ccache libffi-dev libssl-dev

      - name: Download and configure ESP-IDF v4.2.2
        run: |
          python --version
          mkdir ${GITHUB_WORKSPACE}/esp
          cd ${GITHUB_WORKSPACE}/esp
          git clone --recursive --branch v4.2.2 https://github.com/espressif/esp-idf.git
          echo "IDF_PATH=${{ github.workspace }}/esp/esp-idf" >> $GITHUB_ENV

      - name: Install ESP-IDF v4.2.2
        run: |
          cd $IDF_PATH
          ./install.sh --python `which python3.8`

      - name: Add ESP-IDF tools to PATH
        run: echo "${{ github.workspace }}/esp/esp-idf/tools" >> $GITHUB_PATH

      - name: Build
        run: |
          source ${{ github.workspace }}/esp/esp-idf/export.sh
          printenv | grep IDF
          idf.py --version          
          cd tests
          mkdir cmake-build-unit-tests
          cd cmake-build-unit-tests
          cmake -G "Unix Makefiles" ..
          make -j 4
        
      - name: Run tests
        run: |
          cd tests/cmake-build-unit-tests
          ctest
