This is a patched version of ${ESP-IDF}/components/tcp_transport

1. "ESP x509 Certificate Bundle" is included into ESP-IDF, but the implementation of esp_http_client doesn't allow to use it.
   The main purpose of this patch is to implement new API esp_transport_ssl_crt_bundle_attach,
   which can be used in esp_http_client for adding support for "ESP x509 Certificate Bundle".

2. Implement asynchronous mode support for TCP connections

========================================================================================================================
The patch diff: https://github.com/ruuvi/ruuvi.gateway_esp.c/pull/448/commits/12f9c44deb4d1a9db21b2f8438898a9109ea2210
========================================================================================================================

diff --git a/components/esp_http_client_patched/esp_http_client.c b/components/esp_http_client_patched/esp_http_client.c
index d3f00ec..64d3474 100644
--- a/components/esp_http_client_patched/esp_http_client.c
+++ b/components/esp_http_client_patched/esp_http_client.c
@@ -600,6 +600,8 @@ esp_http_client_handle_t esp_http_client_init(const esp_http_client_config_t *co
         esp_transport_ssl_enable_global_ca_store(ssl);
     } else if (config->cert_pem) {
         esp_transport_ssl_set_cert_data(ssl, config->cert_pem, strlen(config->cert_pem));
+    } else {
+        esp_transport_ssl_crt_bundle_attach(ssl);
     }

     if (config->client_cert_pem) {
diff --git a/components/tcp_transport_patched/include/esp_transport_ssl.h b/components/tcp_transport_patched/include/esp_transport_ssl.h
index 2711abf..766da6b 100644
--- a/components/tcp_transport_patched/include/esp_transport_ssl.h
+++ b/components/tcp_transport_patched/include/esp_transport_ssl.h
@@ -59,6 +59,8 @@ void esp_transport_ssl_set_cert_data_der(esp_transport_handle_t t, const char *d
  */
 void esp_transport_ssl_enable_global_ca_store(esp_transport_handle_t t);

+void esp_transport_ssl_crt_bundle_attach(esp_transport_handle_t t);
+
 /**
  * @brief      Set SSL client certificate data for mutual authentication (as PEM format).
  *             Note that, this function stores the pointer to data, rather than making a copy.
diff --git a/components/tcp_transport_patched/transport_ssl.c b/components/tcp_transport_patched/transport_ssl.c
index 573782e..7839eb0 100644
--- a/components/tcp_transport_patched/transport_ssl.c
+++ b/components/tcp_transport_patched/transport_ssl.c
@@ -26,6 +26,7 @@
 #include "esp_transport_utils.h"
 #include "esp_transport_ssl_internal.h"
 #include "esp_transport_internal.h"
+#include "esp_crt_bundle.h"

 static const char *TAG = "TRANS_SSL";

@@ -203,6 +204,14 @@ void esp_transport_ssl_enable_global_ca_store(esp_transport_handle_t t)
     }
 }

+void esp_transport_ssl_crt_bundle_attach(esp_transport_handle_t t)
+{
+  transport_ssl_t *ssl = esp_transport_get_context_data(t);
+  if (t && ssl) {
+    ssl->cfg.crt_bundle_attach = &esp_crt_bundle_attach;
+  }
+}
+
 #ifdef CONFIG_ESP_TLS_PSK_VERIFICATION
 void esp_transport_ssl_set_psk_key_hint(esp_transport_handle_t t, const psk_hint_key_t* psk_hint_key)
 {

========================================================================================================================
The patch diffs:
https://github.com/ruuvi/ruuvi.gateway_esp.c/pull/453/commits/1c69f285253990774976a8ce40c93c8b34f183d0
https://github.com/ruuvi/ruuvi.gateway_esp.c/pull/453/commits/ae434698ec57f0c9431cabe7c3f0f45eb091a624
========================================================================================================================
diff --git a/components/tcp_transport_patched/transport_tcp.c b/components/tcp_transport_patched/transport_tcp.c
index d61626f..3fa367c 100644
--- a/components/tcp_transport_patched/transport_tcp.c
+++ b/components/tcp_transport_patched/transport_tcp.c
@@ -29,8 +29,22 @@

 static const char *TAG = "TRANS_TCP";

+typedef enum {
+    TRANS_TCP_INIT = 0,
+    TRANS_TCP_CONNECTING,
+    TRANS_TCP_CONNECTED,
+    TRANS_TCP_FAIL,
+} transport_tcp_conn_state_t;
+
 typedef struct {
     int sock;
+    transport_tcp_conn_state_t conn_state;
+    bool non_block; /*!< Configure non-blocking mode. If set to true the
+                         underneath socket will be configured in non
+                         blocking mode after tls session is established */
+    fd_set rset;    /*!< read file descriptors */
+    fd_set wset;    /*!< write file descriptors */
+    TickType_t timer_start;
 } transport_tcp_t;

 static int resolve_dns(const char *host, struct sockaddr_in *ip)
@@ -86,6 +100,8 @@ static int tcp_connect(esp_transport_handle_t t, const char *host, int port, int
     struct timeval tv = { 0 };
     transport_tcp_t *tcp = esp_transport_get_context_data(t);

+    ESP_LOGD(TAG, "tcp_connect: %s:%d, timeout=%d ms, non_block=%d", host, port, timeout_ms, tcp->non_block);
+
     bzero(&remote_ip, sizeof(struct sockaddr_in));

     //if stream_host is not ip address, resolve it AF_INET,servername,&serveraddr.sin_addr
@@ -131,7 +147,7 @@ static int tcp_connect(esp_transport_handle_t t, const char *host, int port, int
             tcp->sock, ipaddr_ntoa((const ip_addr_t*)&remote_ip.sin_addr.s_addr), port);

     if (connect(tcp->sock, (struct sockaddr *)(&remote_ip), sizeof(struct sockaddr)) < 0) {
-        if (errno == EINPROGRESS) {
+        if (!tcp->non_block && (errno == EINPROGRESS)) {
             fd_set fdset;

             esp_transport_utils_ms_to_timeval(timeout_ms, &tv);
@@ -162,19 +178,21 @@ static int tcp_connect(esp_transport_handle_t t, const char *host, int port, int
                     goto error;
                 }
             }
-        } else {
+        } else if (!tcp->non_block || (errno != EINPROGRESS)) {
             ESP_LOGE(TAG, "[sock=%d] connect() error: %s", tcp->sock, strerror(errno));
             goto error;
         }
     }
-    // Reset socket to blocking
-    if ((flags = fcntl(tcp->sock, F_GETFL, NULL)) < 0) {
-        ESP_LOGE(TAG, "[sock=%d] get file flags error: %s", tcp->sock, strerror(errno));
-        goto error;
-    }
-    if (fcntl(tcp->sock, F_SETFL, flags & ~O_NONBLOCK) < 0) {
-        ESP_LOGE(TAG, "[sock=%d] reset blocking error: %s", tcp->sock, strerror(errno));
-        goto error;
+    if (!tcp->non_block) {
+        // Reset socket to blocking
+        if ((flags = fcntl(tcp->sock, F_GETFL, NULL)) < 0) {
+            ESP_LOGE(TAG, "[sock=%d] get file flags error: %s", tcp->sock, strerror(errno));
+            goto error;
+        }
+        if (fcntl(tcp->sock, F_SETFL, flags & ~O_NONBLOCK) < 0) {
+            ESP_LOGE(TAG, "[sock=%d] reset blocking error: %s", tcp->sock, strerror(errno));
+            goto error;
+        }
     }
     return tcp->sock;
 error:
@@ -183,6 +201,79 @@ error:
     return -1;
 }

+static int esp_transport_tcp_connect_async(esp_transport_handle_t t, const char *host, int port, int timeout_ms)
+{
+    transport_tcp_t *tcp = esp_transport_get_context_data(t);
+    /* These states are used to keep a tab on connection progress in case of non-blocking connect,
+    and in case of blocking connect these cases will get executed one after the other */
+    switch (tcp->conn_state) {
+        case TRANS_TCP_INIT:
+            tcp->non_block = true;
+            tcp->sock = tcp_connect(t, host, port, timeout_ms);
+            if (tcp->sock < 0) {
+                return -1;
+            }
+            FD_ZERO(&tcp->rset);
+            FD_SET(tcp->sock, &tcp->rset);
+            tcp->wset = tcp->rset;
+            tcp->timer_start = xTaskGetTickCount();
+            tcp->conn_state = TRANS_TCP_CONNECTING;
+            return 0; // Connection has not yet established
+
+        case TRANS_TCP_CONNECTING:
+        {
+            struct timeval tv = { .tv_sec = 0, .tv_usec = 0 };
+            if (select(tcp->sock + 1, &tcp->rset, &tcp->wset, NULL, &tv) < 0)
+            {
+                ESP_LOGD(TAG, "Non blocking connecting failed");
+                tcp->conn_state = TRANS_TCP_FAIL;
+                return -1;
+            }
+
+            if (FD_ISSET(tcp->sock, &tcp->rset) || FD_ISSET(tcp->sock, &tcp->wset))
+            {
+                int       error = 0;
+                socklen_t len   = sizeof(error);
+                /* pending error check */
+                if (getsockopt(tcp->sock, SOL_SOCKET, SO_ERROR, &error, &len) < 0)
+                {
+                    ESP_LOGD(TAG, "Non blocking connect failed");
+                    tcp->conn_state = TRANS_TCP_FAIL;
+                    return -1;
+                }
+            }
+            else
+            {
+                const TickType_t now = xTaskGetTickCount();
+                const uint32_t delta_ticks = now - tcp->timer_start;
+                if (delta_ticks > pdMS_TO_TICKS(timeout_ms))
+                {
+                    ESP_LOGD(TAG, "select() timed out");
+                    tcp->conn_state = TRANS_TCP_FAIL;
+                    return -1;
+                }
+                return 0; // Connection has not yet established
+            }
+            /* By now, the connection has been established */
+            tcp->conn_state = TRANS_TCP_CONNECTED;
+
+#if defined(__GNUC__) && (__GNUC__ >= 7)
+            __attribute__((fallthrough));
+#endif
+        }
+        case TRANS_TCP_CONNECTED:
+            ESP_LOGD(TAG, "%s: connected", __func__);
+            return 1;
+        case TRANS_TCP_FAIL:
+            ESP_LOGE(TAG, "%s: failed to open a new connection", __func__);
+            break;
+        default:
+            ESP_LOGE(TAG, "%s: invalid TCP conn-state", __func__);
+            break;
+    }
+    return -1;
+}
+
 static int tcp_write(esp_transport_handle_t t, const char *buffer, int len, int timeout_ms)
 {
     int poll;
@@ -302,8 +393,10 @@ esp_transport_handle_t esp_transport_tcp_init(void)
     });

     tcp->sock = -1;
+    tcp->non_block = false;
     esp_transport_set_func(t, tcp_connect, tcp_read, tcp_write, tcp_close, tcp_poll_read, tcp_poll_write, tcp_destroy);
     esp_transport_set_context_data(t, tcp);
+    esp_transport_set_async_connect_func(t, &esp_transport_tcp_connect_async);
     t->_get_socket = tcp_get_socket;

     return t;
