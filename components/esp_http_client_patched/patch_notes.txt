This is a patched version of ${ESP-IDF}/components/esp_http_client

1. "ESP x509 Certificate Bundle" is included into ESP-IDF, but the implementation of esp_http_client doesn't allow to use it.
The main purpose of this patch is to add support for "ESP x509 Certificate Bundle" to esp_http_client.

2. Implement asynchronous mode support for HTTP connections


========================================================================================================================
The patch diff: https://github.com/ruuvi/ruuvi.gateway_esp.c/pull/448/commits/12f9c44deb4d1a9db21b2f8438898a9109ea2210
========================================================================================================================

diff --git a/components/esp_http_client_patched/esp_http_client.c b/components/esp_http_client_patched/esp_http_client.c
index d3f00ec..64d3474 100644
--- a/components/esp_http_client_patched/esp_http_client.c
+++ b/components/esp_http_client_patched/esp_http_client.c
@@ -600,6 +600,8 @@ esp_http_client_handle_t esp_http_client_init(const esp_http_client_config_t *co
         esp_transport_ssl_enable_global_ca_store(ssl);
     } else if (config->cert_pem) {
         esp_transport_ssl_set_cert_data(ssl, config->cert_pem, strlen(config->cert_pem));
+    } else {
+        esp_transport_ssl_crt_bundle_attach(ssl);
     }

     if (config->client_cert_pem) {
diff --git a/components/tcp_transport_patched/include/esp_transport_ssl.h b/components/tcp_transport_patched/include/esp_transport_ssl.h
index 2711abf..766da6b 100644
--- a/components/tcp_transport_patched/include/esp_transport_ssl.h
+++ b/components/tcp_transport_patched/include/esp_transport_ssl.h
@@ -59,6 +59,8 @@ void esp_transport_ssl_set_cert_data_der(esp_transport_handle_t t, const char *d
  */
 void esp_transport_ssl_enable_global_ca_store(esp_transport_handle_t t);

+void esp_transport_ssl_crt_bundle_attach(esp_transport_handle_t t);
+
 /**
  * @brief      Set SSL client certificate data for mutual authentication (as PEM format).
  *             Note that, this function stores the pointer to data, rather than making a copy.
diff --git a/components/tcp_transport_patched/transport_ssl.c b/components/tcp_transport_patched/transport_ssl.c
index 573782e..7839eb0 100644
--- a/components/tcp_transport_patched/transport_ssl.c
+++ b/components/tcp_transport_patched/transport_ssl.c
@@ -26,6 +26,7 @@
 #include "esp_transport_utils.h"
 #include "esp_transport_ssl_internal.h"
 #include "esp_transport_internal.h"
+#include "esp_crt_bundle.h"

 static const char *TAG = "TRANS_SSL";

@@ -203,6 +204,14 @@ void esp_transport_ssl_enable_global_ca_store(esp_transport_handle_t t)
     }
 }

+void esp_transport_ssl_crt_bundle_attach(esp_transport_handle_t t)
+{
+  transport_ssl_t *ssl = esp_transport_get_context_data(t);
+  if (t && ssl) {
+    ssl->cfg.crt_bundle_attach = &esp_crt_bundle_attach;
+  }
+}
+
 #ifdef CONFIG_ESP_TLS_PSK_VERIFICATION
 void esp_transport_ssl_set_psk_key_hint(esp_transport_handle_t t, const psk_hint_key_t* psk_hint_key)
 {


========================================================================================================================
The patch diff: https://github.com/ruuvi/ruuvi.gateway_esp.c/pull/453/commits/1c69f285253990774976a8ce40c93c8b34f183d0
========================================================================================================================
diff --git a/components/esp_http_client_patched/esp_http_client.c b/components/esp_http_client_patched/esp_http_client.c
index 64d3474..63f3708 100644
--- a/components/esp_http_client_patched/esp_http_client.c
+++ b/components/esp_http_client_patched/esp_http_client.c
@@ -78,6 +78,7 @@ typedef struct {
 typedef enum {
     HTTP_STATE_UNINIT = 0,
     HTTP_STATE_INIT,
+    HTTP_STATE_CONNECTING,
     HTTP_STATE_CONNECTED,
     HTTP_STATE_REQ_COMPLETE_HEADER,
     HTTP_STATE_REQ_COMPLETE_DATA,
@@ -998,11 +999,33 @@ esp_err_t esp_http_client_perform(esp_http_client_handle_t client)
             case HTTP_STATE_INIT:
                 if ((err = esp_http_client_connect(client)) != ESP_OK) {
                     if (client->is_async && err == ESP_ERR_HTTP_CONNECTING) {
+                        client->state = HTTP_STATE_CONNECTING;
                         return ESP_ERR_HTTP_EAGAIN;
                     }
                     return err;
                 }
+                client->state = HTTP_STATE_CONNECTING;
                 /* falls through */
+#if defined(__GNUC__) && (__GNUC__ >= 7)
+                __attribute__((fallthrough));
+#endif
+            case HTTP_STATE_CONNECTING:
+                if (client->is_async) {
+                    int ret = esp_transport_connect_async(client->transport, client->connection_info.host,
+                                                          client->connection_info.port, client->timeout_ms);
+                    if (ret == ASYNC_TRANS_CONNECT_FAIL) {
+                        ESP_LOGE(TAG, "Connection failed");
+                        return ESP_ERR_HTTP_CONNECT;
+                    } else if (ret == ASYNC_TRANS_CONNECTING) {
+                        ESP_LOGD(TAG, "Connection not yet established");
+                        return ESP_ERR_HTTP_CONNECTING;
+                    }
+                }
+                client->state = HTTP_STATE_CONNECTED;
+                /* falls through */
+#if defined(__GNUC__) && (__GNUC__ >= 7)
+                __attribute__((fallthrough));
+#endif
             case HTTP_STATE_CONNECTED:
                 if ((err = esp_http_client_request_send(client, client->post_len)) != ESP_OK) {
                     if (client->is_async && errno == EAGAIN) {
@@ -1011,6 +1034,9 @@ esp_err_t esp_http_client_perform(esp_http_client_handle_t client)
                     return err;
                 }
                 /* falls through */
+#if defined(__GNUC__) && (__GNUC__ >= 7)
+                __attribute__((fallthrough));
+#endif
             case HTTP_STATE_REQ_COMPLETE_HEADER:
                 if ((err = esp_http_client_send_post_data(client)) != ESP_OK) {
                     if (client->is_async && errno == EAGAIN) {
@@ -1019,6 +1045,9 @@ esp_err_t esp_http_client_perform(esp_http_client_handle_t client)
                     return err;
                 }
                 /* falls through */
+#if defined(__GNUC__) && (__GNUC__ >= 7)
+                __attribute__((fallthrough));
+#endif
             case HTTP_STATE_REQ_COMPLETE_DATA:
                 if (esp_http_client_fetch_headers(client) < 0) {
                     if (client->is_async && errno == EAGAIN) {
@@ -1027,6 +1056,9 @@ esp_err_t esp_http_client_perform(esp_http_client_handle_t client)
                     return ESP_ERR_HTTP_FETCH_HEADER;
                 }
                 /* falls through */
+#if defined(__GNUC__) && (__GNUC__ >= 7)
+                __attribute__((fallthrough));
+#endif
             case HTTP_STATE_RES_COMPLETE_HEADER:
                 if ((err = esp_http_check_response(client)) != ESP_OK) {
                     ESP_LOGE(TAG, "Error response");
@@ -1131,10 +1163,6 @@ static esp_err_t esp_http_client_connect(esp_http_client_handle_t client)
             int ret = esp_transport_connect_async(client->transport, client->connection_info.host, client->connection_info.port, client->timeout_ms);
             if (ret == ASYNC_TRANS_CONNECT_FAIL) {
                 ESP_LOGE(TAG, "Connection failed");
-                if (strcasecmp(client->connection_info.scheme, "http") == 0) {
-                    ESP_LOGE(TAG, "Asynchronous mode doesn't work for HTTP based connection");
-                    return ESP_ERR_INVALID_ARG;
-                }
                 return ESP_ERR_HTTP_CONNECT;
             } else if (ret == ASYNC_TRANS_CONNECTING) {
                 ESP_LOGD(TAG, "Connection not yet established");
